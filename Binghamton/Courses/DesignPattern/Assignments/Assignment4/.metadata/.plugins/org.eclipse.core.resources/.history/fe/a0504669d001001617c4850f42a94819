package wordCount.visitors;

import wordCount.treesForStrings.BST;
import wordCount.util.FileProcessor;


public class PopulateTreeVisitor implements TreeProcessingVisitorI {
	
	FileProcessor fp = null;
	
	public PopulateTreeVisitor(FileProcessor fileP){
		fp = fileP;
	}

	public void visit(BST bst) {
		String line;
		line = fp.readLineFromFile();
		while(line != null){
			for(String word: line.split(" ")){
				Node node = new Node(word);
				bst.insert(node);
			}
			line = fp.readLineFromFile();
		}
	}
}

//public class PopulateTreeVisitor implements TreeProcessingVisitorI {
//	
//	private BST tree;
//	public PopulateTreeVisitor(BST treeIN){
//		tree =  treeIN;
//	}
//	
//	@Override
//	public void visit(PopulateTreeVisitor tree) {
//		// TODO Auto-generated method stub
//		tree.populate();// Assume
//		
//	}
//	@Override
//	public void visit(WordCountVisitor tree) {
//		// TODO Auto-generated method stub
//		tree.count();
//		
//	}
//	@Override
//	public void visit(grepVisitor tree) {
//		// TODO Auto-generated method stub
//		tree.grep();	
//	}
//}
