
package wordCount.treesForStrings;


import wordCount.util.FileProcessor;
import wordCount.util.Logger;
import wordCount.util.Logger.DebugLevel;

public class BST {
	private Node root;
	private String treeType; 

	public BST() {
		// Default Constructor
	}

	public BST(String treeTypeIn){ 
		treeType = treeTypeIn;
	}

	/********************************************************
	 * 
	 * METHOD NAME : insertInternal
	 * INPUT 	   : TreeNode root and Internal Node
	 * RETURNS	   : Node
	 * PURPOSE     : Insert a node in a BST
	 *
	 ********************************************************/
	
	private Node insertNode(Node root, Node node){
		if(null == root)
				return node;
		Node parent = null, temp = root;
		
		while(null != temp){
			int diff = temp.getCurrentWord().compareTo(node.getCurrentWord());
			if(0 == diff){
				temp.setCurrentWordCount(temp.getCurrentWordCount() + 1);
				temp = null;
			} else if (diff > 0){
				if(null == temp.left){
					temp.left = node;
				} else {
					temp.setCurrentWordCount(temp.getCurrentWordCount() + 1);
					temp =  temp.left;
				}
			} else {
				if(null == temp.right){
					temp.right = node;
				} else {
					temp.setCurrentWordCount(temp.getCurrentWordCount() + 1);
					temp = temp.right;
				}
			}
		}
		return root;
	}

	/********************************************************
	 * 
	 * METHOD NAME : findNode
	 * INPUT 	   : TreeNode root and Internal Node
	 * RETURNS	   : Node
	 * PURPOSE     : Find a Node in a tree
	 *
	 ********************************************************/
	
	private Node findNode(Node root, Node node){
		if (null == root){
			return root;
		} else if(0 == (root.getCurrentWord().compareTo(node.getCurrentWord()))){
			return root;
		} else if((root.getCurrentWord().compareTo(node.getCurrentWord())) < 0){
			return findNode(root.right, node);
		} else {
			return  findNode(root.left, node);
		}
	}

	/********************************************************
	 * 
	 * METHOD NAME : search
	 * INPUT 	   : TreeNode node
	 * RETURNS	   : Node
	 * PURPOSE     : Find the node with minumum value
	 *
	 ********************************************************/
	
	public Node Search(String word){
		if(null == root){
			return null;
		}
		Node temp = root;
		while(null != temp) {
			int diff = temp.getCurrentWord().compareTo(word);
			if(0 == diff){
				return temp;
			} else if (diff > 0) {
				if(null == temp.left)
					return null;
				else 
					temp = temp.left;
			} else {
				if(null == temp.right)
					return null;
				else 
					temp = temp.right;
				}
			}
		 return temp;
		}
	}
	
	/********************************************************
	 * 
	 * METHOD NAME : findMax
	 * INPUT 	   : TreeNode node
	 * RETURNS	   : Node
	 * PURPOSE     : Find the node with Maximum value
	 *
	 ********************************************************/
	
	private Node findMax(Node root){
		while(null != root.right)
			root = root.right;   
		return root;
	}

	/********************************************************
	 * 
	 * METHOD NAME : inOrderSuccessor
	 * INPUT 	   : TreeNode node
	 * RETURNS	   : Node
	 * PURPOSE     : Find the inOrder successor of a Node
	 *
	 ********************************************************/
	
	private Node inOrderSuccessor(Node node){
		if(!node.left.equals(null)){
			return findMin(node.right);
		} else {
			return findNode(root, node);
		}
	}

	/********************************************************
	 * 
	 * METHOD NAME : printInorder
	 * INPUT 	   : TreeNode Node
	 * RETURNS	   : void
	 * PURPOSE     : Print the BST in inOrder way
	 *
	 ********************************************************/
	
	private void printTree(Node node){
		if(null == node)
			return;
		else {
			printTree(node.left);
			Logger.writeMessage(""+node.getCurrentWord() + " Count "+node.getCurrentWordCount(),
								DebugLevel.RESULT);
			printTree(node.right);
		}
	}

	/********************************************************
	 * 
	 * METHOD NAME : printTree
	 * INPUT 	   : void
	 * RETURNS	   : void
	 * PURPOSE     : Calls inOrder traversal BST Tree print
	 *
	 ********************************************************/
	
	public void printInorder(){
		printTree(root);
	}

	/********************************************************
	 * 
	 * METHOD NAME : getSum
	 * INPUT 	   : void
	 * RETURNS	   : void
	 * PURPOSE     : Calls helper to calculate the Sum of BNumber
	 *
	 ********************************************************/
	
	public int printBSum(){
	/********************************************************
	 * NOT SURE IF IT MEANT TO BE IN HERE
	 *********************************************************
	 Logger.writeMessage("The sum of all the B-Numbers is "
						 +calculateSum(root),
		 			 	 DebugLevel.RESULT);
	 ********************************************************/
		return 1;//calculateSum(root);
	}

	/********************************************************
	 * 
	 * METHOD NAME : insert
	 * INPUT 	   : TreeNode node
	 * RETURNS	   : void
	 * PURPOSE     : Inserts the node to a BST
	 *
	 ********************************************************/
	
	public void insert(Node node){
		/******************************************************
		 *  FOLLOWING CHECK IS UNDER CONFUSION IF WE SHOULD 
		 *  ADD ALL INTEGER OR SEGREGATE USING FILTER
		 ***************************************************
		if((null == node.filterType) || 
			node.filterType.filter(node.getBNumber())) {
		 ********************************************************/
			root = insertNode(root, node);
		 /**************************************************	
		  * }
		  *********************************/
	}

	/********************************************************
	 * 
	 * METHOD NAME : deleteNode
	 * INPUT 	   : TreeNode node
	 * RETURNS	   : void
	 * PURPOSE     : Deletes the node from a given BST
	 *
	 ********************************************************/
	

	public void deleteNode(Node node){
		Node parent = findNode(root, node);
		if(!parent.equals(null)){
			if((node.left.equals(null) && node.left.equals(null))){ // both children are null
				if(parent.left.equals(node)){
					parent.left = null;
				} else {
					parent.right = null;
				}
			} else if((node.left.equals(null) || node.left.equals(null))){ // either one is null
				if(node.left.equals(null)){
					if(parent.left.equals(node)){
						parent.left = node.right;
					} else {
						parent.right = node.left;
					}
				} else {
					if(parent.left.equals(node)){
						parent.left = node.right;
					} else {
						parent.right = node.left;
					}
				}
			} else { // none of children is null
				Node inOrderSucc = inOrderSuccessor(node);
				//node.setBNumber(inOrderSucc.getBNumber());
				deleteNode(inOrderSucc);
			}
		}
		//removeNode(node);
		//notifyObservers();// Controvorsial
	}

	/********************************************************
	 * 
	 * METHOD NAME : toString
	 * INPUT 	   : void
	 * RETURNS	   : String
	 * PURPOSE     : Stringify the data members
	 *
	 ********************************************************/
	
	@Override
	public String toString(){
		return root+","+treeType;
	}
}
